import {IDL} from '@dfinity/candid';
import {Principal} from '@dfinity/principal';
import {assertNonNullish} from '@dfinity/utils';
import {init} from '../declarations/icp_index.idl';
import {Module} from '../services/modules.services';
import type {ModuleDescription, ModuleInstallParams} from '../types/module';

export const ICP_INDEX: ModuleDescription = {
  key: 'icp_index',
  name: 'ICP Index',
  canisterId: 'qhbym-qaaaa-aaaaa-aaafq-cai'
};

export class IcpIndexModule extends Module {
  override async install(context: ModuleInstallParams): Promise<void> {
    const {state, ...rest} = context;

    const canisterId = state.getModule('icp_ledger')?.canisterId;

    assertNonNullish(
      canisterId,
      'Cannot configure ICP index because the ICP ledger id is unknown.'
    );

    // Type definitions generated by Candid are not clean enough.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    const arg = IDL.encode(init({IDL}), [{ledger_id: Principal.fromText(canisterId)}]);

    await super.install({
      state,
      ...rest,
      arg
    });
  }
}

export const icpIndex = new IcpIndexModule(ICP_INDEX);
