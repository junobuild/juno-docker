import {IDL} from '@dfinity/candid';
import {AccountIdentifier} from '@dfinity/ledger-icp';
import {Principal} from '@dfinity/principal';
import {assertNonNullish} from '@dfinity/utils';
import {MINTER_IDENTITY_KEY} from '../../constants/constants';
import type {CyclesCanisterInitPayload} from '../../declarations/cmc';
import {init} from '../../declarations/cmc.idl';
import type {ModuleInstallParams} from '../../types/module';

export const prepareCmcArgs = ({
  state,
  identities
}: Pick<ModuleInstallParams, 'state' | 'identities'>): Uint8Array => {
  const icpLedgerCanisterId = state.getModule('icp_ledger')?.canisterId;

  assertNonNullish(
    icpLedgerCanisterId,
    'Cannot configure CMC because the ICP ledger id is unknown.'
  );

  const governanceCanisterId = state.getModule('governance')?.canisterId;

  assertNonNullish(
    governanceCanisterId,
    'Cannot configure CMC because the NNS Governance id is unknown.'
  );

  const {[MINTER_IDENTITY_KEY]: minterIdentity} = identities;

  const minterAccountIdentifier = AccountIdentifier.fromPrincipal({
    principal: minterIdentity.getPrincipal()
  });

  const sourceArg: CyclesCanisterInitPayload = {
    exchange_rate_canister: [],
    last_purged_notification: [0n],
    governance_canister_id: [Principal.fromText(governanceCanisterId)],
    minting_account_id: [minterAccountIdentifier.toHex()],
    ledger_canister_id: [Principal.fromText(icpLedgerCanisterId)],
    cycles_ledger_canister_id: []
  };

  // Type definitions generated by Candid are not clean enough.
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  return IDL.encode(init({IDL}), [[sourceArg]]);
};
